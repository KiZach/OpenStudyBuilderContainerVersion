#############################################################################
####      Build validation, required to pass before merging a PR        #####
#############################################################################

# Specify an automatic trigger for executing this pipeline
trigger:
  batch: true # Whether to batch changes per branch.  (false,n,no,off,on,true,y,yes)
  branches:
    include:
      - main

# Identify which agent to run the pipeline on
pool:
  name: "clinical-mdr-dev-vmss"

variables:
  - name: python_version
    value: 3.11

jobs:
  - job:
    displayName: "Automated build validation"
    steps:
      - checkout: self
        persistCredentials: true
        submodules: true
        fetchDepth: 0
        clean: true

      # Specify python version. The version must be manually installed beforehand so the agent has it available.
      - task: UsePythonVersion@0
        inputs:
          versionSpec: ${{variables.PYTHON_VERSION}}
          addToPath: true
          architecture: "x64"

      - script: |
          pip install --upgrade pip pipenv wheel
          pipenv sync --dev
        displayName: "Set up Python ${{variables.PYTHON_VERSION}} environment"

      - script: |
          # Ensure none of the current composed services are running
          docker compose down --volumes
      
          # Remove all unused local volumes, which are not referenced by any containers.
          docker volume prune -f
        displayName: "Reset docker environment"

      # Install python dependencies, start docker containers

      - script: |
          export UID
          docker compose build --progress=plain api
        displayName: "Build Docker images"

      - script: |
          docker compose up --detach --renew-anon-volumes --wait --wait-timeout 120 database
          docker compose up --detach --wait --wait-timeout 60 api
        displayName: "Start docker services"

      - task: PowerShell@2
        displayName: "Wait for API availability"
        inputs:
          failOnStderr: true
          targetType: "filePath"
          filePath: $(Build.SourcesDirectory)/pipelines/scripts/InvokeRequestWithRetry.ps1
          arguments:
            > # Use this to avoid newline characters in multi-line string
            -URI "http://localhost:8000/system/information"
            -Method "GET"
            -Retries 20
            -SecondsDelay 10
            -TimeoutSec 200

      - script: |
          pipenv run lint
        displayName: "Pylint"

      - script: |
          pipenv run test
        env:
          DATABASE_URL: bolt://neo4j:changeme1234@localhost:7687
          DATABASE_NAME:
          API_BASE_URL: http://localhost:8000
          API_AUTH_TOKEN:
        condition: always()
        displayName: "Test migrations"

      - script: |
          pipenv run test_corrections
        env:
          DATABASE_URL: bolt://neo4j:changeme1234@localhost:7687
          DATABASE_NAME: neo4j
          API_BASE_URL: http://localhost:8000
          API_AUTH_TOKEN:
        condition: always()
        displayName: "Test corrections"

      - script: |
          docker compose logs --no-color --no-log-prefix database | tee '$(Build.ArtifactStagingDirectory)/database.logs.txt' | tail -n 1000
          docker compose logs --no-color --no-log-prefix api | tee '$(Build.ArtifactStagingDirectory)/api.logs.txt' | tail -n 1000
        condition: always()
        displayName: "Container logs"

      # Checkout git branch
      - script: |
          set -ex
          
          git fetch -a

          if [[ '$(Build.Reason)' == 'PullRequest' ]]; then
            gitbranch='$(System.PullRequest.SourceBranch)'
          else
            gitbranch='$(Build.SourceBranch)'
          fi
          gitbranch="${gitbranch#refs/heads/}"

          echo "##vso[task.setvariable variable=gitbranch;isOutput=true;]$gitbranch"

          git checkout "$gitbranch"
          git pull
        displayName: Checkout git branch
        name: gitref

      # Build SBOM
      - script: >-
          docker compose run --rm api pipenv run build-sbom > sbom.md
        displayName: Build SBOM

      # Append SBOM-ADDITIONAL & Commit SBOM
      - script: |
          set -ex
          tail -n +2 sbom-additional.md >> sbom.md
          
          if [[ '$(Build.Reason)' == 'PullRequest' ]] && ! git diff --exit-code --quiet sbom.md ; then
            git config --global user.email 'pipeline@studybuilder.com'
            git config --global user.name 'Pipeline $(Build.BuildNumber)'
          
            if [[ '$(Build.SourceBranchName)' != 'main' ]] ; then
              # Post a comment on pull-request that the SBOM has been changed #
              pwsh -NoLogo -NonInteractive -File pipelines/scripts/make-sbom-comment-on-pr.ps1 -token '$(System.AccessToken)' -pullRequestId '$(System.PullRequest.PullRequestId)' -projectName '$(System.TeamProject)' -repositoryName '$(Build.Repository.Name)'
            fi
          
            # Commit changes #
            git add sbom.md
            git commit sbom.md -m 'Pipeline $(Build.BuildNumber) committed changes to SBOM'
            gitbranch='$(System.PullRequest.SourceBranch)'
            gitbranch="${gitbranch#refs/heads/}"
            git push 'https://$(System.AccessToken)@dev.azure.com/novonordiskit/Clinical-MDR/_git/$(Build.Repository.Name)' "$gitbranch"          
          fi
        displayName: "Commit sbom.md"

      # Publish container logs
      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'Container logs'
        condition: always()
        displayName: "Publish container logs"

      # Publish test results
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "$(Build.SourcesDirectory)/reports/test_report.xml"
          failTaskOnFailedTests: true
          testRunTitle: "DB Schema Migration - Build $(Build.BuildNumber) validation"
        condition: always()
        displayName: "Publish test report"

      # Publish code coverage results
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "$(System.DefaultWorkingDirectory)/reports/coverage.xml"
        condition: always()
        displayName: "Publish code coverage"

      # Shut down Docker services and clean up local images
      - script: |
          set +e
          
          # Shut down all composed services 
          docker compose down --volumes
    
          # Remove all unused local volumes, which are not referenced by any containers.
          docker volume prune -f

        condition: always() # this step will always run, even if the pipeline is canceled
        displayName: "Docker cleanup"
